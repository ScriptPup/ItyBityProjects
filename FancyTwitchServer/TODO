# Bug Fixes Needed:

## UI Bugs

1. Deletes don't always update for some reason
2. Updates don't always update for some reason

## Bot account viability

Need to split out redemption authorization & bot account authorization.

For some reason Twitch doesn't allow `channel-points-channel.v1.<userid>` to be listened to via a moderator or editor account. They require that ONLY the creator can listen to the topic.
This means in order to actually listen for redemptions, the streamer needs to be logged in.

Currently, I use one account for everything. This means that the streamer has to be the one to authenticate - otherwise the entire thing fails when the pub-sub tries to start up.
I want to let the user choose to either use the streamer account for everything, OR to authenticate a seprate bot account. The seprate bot account will allow said channel to be used as the chat replier and such - while the channel owner account can continue to be used for the channel redemption pub/sub along with creating custom redemptions and such.

Ideally, permission to create and listen to channel redemptions should be something that can be granted to other channels so it's not so complicated...But I guess that's not going to happen any time soon, considering this is an issue from 2020.

**Ref**
- https://discuss.dev.twitch.tv/t/only-getting-err-badauth-from-listen-pubsub-request/23598/8
- https://discuss.dev.twitch.tv/t/introducing-the-channel-points-redemption-pubsub-topic/23489/5

# Additional Features needed:

## Redemptions
- Add link to twitch: when "Manage Here?" is set to "Yes", then when the server recieved the add request it should check if a redemption of that name already exists. If so, check if it's owned by this application; if so, so then modify it. If there is one and it's not owned by this app then fail with an error. If there's no command, create it and register it as owned.

## "Hidden" variable sets

Maybe something like `{!var=something}`

The idea is you can do something like

```
name: !hearmeout something is off here...
command: The last time we heard you out, you said "{hearMeOut}". {!hearMeOut=@message}
expected result: The last time we heard you out, you said "If this works I'll eat my hat"
```

## Implement timeout settings so you users can't spam things insecently 
    - User timeout
    - Global timeout

## Add custom command extension

Allow for a custom command action to be called instead of going through the parser. I imagine it would look something like this:

- Use PreMiddleware for this
- Return "BREAK" from any PreMiddleware to stop execution after the middleware

```
name: !fanart
command: ~cycleArt
expected: performs custom action that cycles the fan-art displayed by a custom page
expected: Either replies with an output, or doesn't reply at all
```